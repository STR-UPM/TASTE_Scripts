#!/usr/bin/python3
# -*- coding: utf-8 -*-

#              Copyright (C) 2022 STRAST-UPM research group
#       This work was developed in the context of the AURORA project

"""
taste-create-git-ignore

Purpose:
   This script creates a .gitignore file given a set of TASTE functions passed
   as command line arguments. If the file exist the contents are NOT erased
   unless specified by the user.

Considerations:
   This script SHOULD be invoked in the TASTE project root since it depends on
   the location of the work directory. However, you can specify the TASTE root
   project location with the -r flag.
   The TASTE functions passed as parameter can be specified with and without
   their directory name.
   Although,  the entry point is located in the bottom af all functions.  This
   script is intended to be read from top to bottom. Nested/inner functions
   where used to limit the scope of auxiliary subprograms.
"""

import os
import sys
import glob

from typing import Dict, List, Set


TASTE_SUPPORTED_LANGS = [
    "C",
    "CPP",
    "Ada",
    "SDL",
    "Simulink",
    "SIMULINK",
    "QGenC",
    "QGenAda",
    "GUI",
    "Blackbox_C",
    "Blackbox_Device"
]


# ------------- #
# Console Class #
# ------------- #

class Console:
    """
    This module (static class) gathers the options introduce by the user in the
    console
    """

    # Initialize static variables to default:

    __initialized: bool = False
    tp_dir: str = os.getcwd()
    gi_dir: str = os.path.join(tp_dir, "work")
    gi_path: str = os.path.join(gi_dir, ".gitignore")
    my_name: str = os.path.basename(sys.argv[0])

    flags: Dict[str, bool] = {
        "DEBUG_SET": False,
        "FORCE_SET": False,
    }

    taste_fns: List[str] = [""]

    @staticmethod
    def initialize() -> None:
        """ Setups the Console members based on the command line arguments

        This procedure MUST be invoked before any other operation, since it
        processes the user's command line options and flags.

        This procedure supports many invocations, it initializes its static
        members only once, the first time.
        """

        if not Console.__initialized:
            Console.__initialized = True

            needs_help = "-h" in sys.argv
            if needs_help:
                Console.print_usage()
                sys.exit(0)

            Console.flags["DEBUG_SET"] = Console.__flag_value("-dbg")
            Console.flags["FORCE_SET"] = Console.__flag_value("-f")

            Console.tp_dir = Console.__arg_value("-r")
            Console.gi_dir = os.path.join(Console.tp_dir, "work")
            Console.gi_path = os.path.join(Console.gi_dir, ".gitignore")

            missing_fns = (len(sys.argv) - 1) == 0
            if missing_fns:
                print("Info: You will ignore everything inside the work directory")

            Console.taste_fns = [os.path.basename(a.strip("/")) for a in sys.argv[1:]]

    @staticmethod
    def __arg_value(arg_symbol: str) -> str:
        arg_value = ""
        if arg_symbol in sys.argv:
            idx = sys.argv.index(arg_symbol)
            arg_value = sys.argv[idx + 1]
            del sys.argv[idx]
            del sys.argv[idx]
        return arg_value

    @staticmethod
    def __flag_value(arg_symbol: str) -> bool:
        flag_set: bool = arg_symbol in sys.argv
        if flag_set:
            sys.argv.remove(arg_symbol)
        return flag_set

    @staticmethod
    def print_usage() -> None:
        """Public method that print this script's usage"""
        print(f"""\
Usage: {Console.my_name} [-h] [-dbg] [-f] [-r ROOT] <FUNCTIONS>
    - <FUNCTIONS>   space separated list of TASTE functions to be ignored
    - [-h]          print this help
    - [-dbg]        optional flag to run in debug mode and print verbose messages
    - [-f]          if a gitignore file exists, overwrite it
    - [-r ROOT]     specify the TASTE root project location""")

    @staticmethod
    def print_debug(msg) -> None:
        """Public method that prints the given msg if debug mode set"""
        if Console.flags["DEBUG_SET"]:
            print("Debug: ", msg)


# ----------------- #
# FileIgnorer Class #
# ----------------- #

class FileIgnorer:
    """ This module handles the logic to autogenerate the lines to ignore a file

    The module takes into account the directories and files that were already
    ignored, i.e.: they are ignored only once.
    """

    ignored_files: Set[str] = set()

    @staticmethod
    def lines_to_ignore_all_except(file_path: str) -> str:
        """ Returns the required lines to ignore everything except the given file path

        Note that these "required lines" include the lines to ignore the file
        parent directories.
        """

        file_path = glob.glob(file_path)

        for fp in file_path:
            if not FileIgnorer.__was_ignored(fp):
                lines = FileIgnorer.__lines_to_ignore_parents_from(fp) + f"!{fp}{os.linesep*2}"

                FileIgnorer.ignored_files.add(fp)
                return lines

        return ""

    @staticmethod
    def __lines_to_ignore_parents_from(file_path: str) -> str:
        """Returns a string to ignore parent directories from file_path

        Note that if any directory was previously ignored, it wont be ignored
        again.
        """
        file_path = os.path.normpath(file_path)

        lines: str = ""
        for folder in FileIgnorer.__folders_to_ignore_from(file_path):
            FileIgnorer.ignored_files.add(folder)
            lines = lines + f"""\
!{folder}
{folder}/*
"""
        return lines

    @staticmethod
    def __folders_to_ignore_from(file_path: str) -> List[str]:
        """
        Returns the list of folders that need to be ignored for the given
        file path
        """
        parents: List[str] = list()

        parent: str = os.path.dirname(file_path)
        while parent not in ('', '/') and not FileIgnorer.__was_ignored(parent):
            # Note: If the parent was ignored, its parents were ignored too!
            parents.append(parent)
            parent = os.path.dirname(parent)

        parents.reverse()
        return parents

    @staticmethod
    def __was_ignored(file_path: str) -> bool:
        return FileIgnorer.ignored_files and file_path in FileIgnorer.ignored_files


# --------- #
# Functions #
# --------- #

# Main #

def main() -> int:
    """handles errors while opening the file, in success, fills the gitignore"""

    Console().initialize()
    Console.print_debug(f"Processing functions: {', '.join(Console.taste_fns)}")
    os.chdir(Console.gi_dir)

    try:

        mode = "w+" if Console.flags["FORCE_SET"] else "x"
        with open(".gitignore", mode) as gi_fd:
            return fill_gitignore(gi_fd, Console.taste_fns)

    except FileExistsError as existing:
        print(f"Error: The {existing.filename} file exists, use the -f option to overwrite it!")
    except FileNotFoundError as not_found:
        print(f"Error: The file {not_found.filename} does not exist")

    Console.print_usage()
    return 1


# fill_gitignore #

def fill_gitignore(gi_fd, taste_fns: List[str]) -> int:
    """
    Fills the gitignore file with the required contents to ignore everything,
    except the user's hand-written files from the given taste functions
    """

    def header() -> str:
        return """\
################################################################################
#                              G I T I G N O R E                               #
#                                                                              #
#         This file was autogenerated by TASTE, please do not edit it          #
################################################################################

# Ignore everything in this (work) directory except the gitignore
*
!.gitignore

"""

    def body() -> str:
        return f'{os.linesep * 2}'.join([lines_for_fn(fn) for fn in taste_fns])

    def end() -> str:
        return f"{os.linesep}#EOF{os.linesep}"

    gi_fd.write(header())
    gi_fd.write(body())
    gi_fd.write(end())

    return 0


# lines_for_fn #

def lines_for_fn(fn_name: str) -> str:
    """Creates the list of files to be excluded for the given TASTE function

    Returns:
        The lines (a string) that should be added to the gitignore in order to
        include only the code written by the user for the function fn_name.
    """
    Console.print_debug("+ " + fn_name)

    lines = f"# Ignore all except hand written files from the {fn_name} function:{os.linesep}"
    for user_file in files_written_by_users(fn_name):
        lines = lines + FileIgnorer.lines_to_ignore_all_except(user_file)

    return lines


# files_written_by_users #

def files_written_by_users(fn_name: str) -> List[str]:
    """Returns a list of files written by the user, that should not be ignored"""
    result: List[str] = list()

    # user_file_from #

    def user_file_from(fn_name: str, lang: str) -> str:
        user_file: str = ""

        if lang in ("C", "Blackbox_C"):
            user_file = f"{fn_name.lower()}.c"
        if lang == "Ada":
            user_file = f"{fn_name.lower()}.adb"
        if lang == "CPP":
            user_file = f"{fn_name.lower()}.cc"
        if lang == "SDL":
            user_file = f"{fn_name.lower()}.pr"
        if lang == "GUI":
            user_file = "UserWidgets.py"
        if lang in ("QGenC", "QGenAda", "Simulink"):
            user_file = "*.slx"

        return user_file

    # files_written_by_user_from_language #

    def files_written_by_user_from_language(lang_path: str) -> str:
        lang = os.path.basename(lang_path)
        Console.print_debug("    Â· " + lang)
        return f"{lang_path}/src/{user_file_from(fn_name, lang)}"

    # files_written_by_user_recursively #

    def files_written_by_user_recursively(path: str) -> None:
        # Case 1) The dir is a TASTE supported language, C, CPP, Ada, SDL, ...
        if os.path.basename(path) in TASTE_SUPPORTED_LANGS:
            # Case 1.1) The dir is a soft/hard link
            if os.path.islink(path):
                result.append(path)
                return  # don't dig in the link, get out!

            # Case 1.2) The dir is a regular directory:
            result.append(files_written_by_user_from_language(path))

        # Case 2) Its nota TASTE supported language
        for subpath in os.listdir(path):
            subpath = os.path.join(path, subpath)
            if os.path.isdir(subpath):
                files_written_by_user_recursively(subpath)

    files_written_by_user_recursively(fn_name)
    return result


# ----------- #
# Entry Point #
# ----------- #

if __name__ == "__main__":
    sys.exit(main())


'''
Acronyms:
=========

- fn     : Function
- gi     : git ignore
- lang   : Language
- implem : Implementation

Notes:
======

Suppose you have a TASTE project named TP and it contains a function name TF_1.
Now, let's assume that TF_1 has n implementations, in all the possible modelling
and programming languages.

In the latest version of taste (v10 with KAZOO) the project TP would have the
following structure:

    TP
    |-- Makefile
    `-- work
        `-- TF_1
            |-- CPP  # Soft link to the current CPP implementation
            |-- Ada  # Soft link to the current Ada implementation
            `-- implem
                |-- <Implementation name 1>
                |   |-- C
                |   |   |
                |   |   `-- src
                |   |-- Ada
                |   |   |
                |   |   `-- src
                |   |-- ...
                |   `-- GUI
                |-- <Implementation name 2>
                |-- ...
                `-- <Implementation name n>

However, when *there is only one implementation* for a TASTE function, the implem
folder is omitted. E.g: we have a QGenC function named MyQGenFunc, then the tree
for that function would be:

    TP
    |-- Makefile
    `-- work
        `-- MyQgenFunc
            `-- QGenC   # NOTE: This is NOT a soft-link
                `-- src
                    |-- # Filled with autogenerated files and
                    `-- # Simulink models edited by the user.

'''
